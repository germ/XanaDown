import test from '@interactjs/_dev/test/test';
import normalizeListeners from './normalizeListeners';
test('utils/normalizeListeners', (t) => {
    const a = () => { };
    const b = () => { };
    const c = () => { };
    t.deepEqual(normalizeListeners('type1', a), {
        type1: [a],
    }, 'single type, single listener function');
    t.deepEqual(normalizeListeners('type1 type2', a), {
        type1: [a],
        type2: [a],
    }, 'multiple types, single listener function');
    t.deepEqual(normalizeListeners('type1 type2', a), normalizeListeners(['type1', 'type2'], a), 'array of types equivalent to space separated string');
    t.deepEqual(normalizeListeners('type1', [a, b]), {
        type1: [a, b],
    }, 'single type, multiple listener functions');
    t.deepEqual(normalizeListeners('prefix', { _1: [a, b], _2: [b, c] }), {
        prefix_1: [a, b],
        prefix_2: [b, c],
    }, 'single type prefix, object of { suffix: [fn, ...] }');
    t.deepEqual(normalizeListeners('prefix1 prefix2', [{ _1: [a, b], _2: [b, c] }]), {
        prefix1_1: [a, b],
        prefix1_2: [b, c],
        prefix2_1: [a, b],
        prefix2_2: [b, c],
    }, 'multiple type prefixes, single length array of { suffix: [fn, ...] }');
    t.deepEqual(normalizeListeners({ _1: [a, b], _2: [b, c] }), {
        _1: [a, b],
        _2: [b, c],
    }, 'object of { suffix: [fn, ...] } as type arg');
    t.deepEqual(normalizeListeners({ '_1 _2': [a, b], '_3': [b, c] }), {
        _1: [a, b],
        _2: [a, b],
        _3: [b, c],
    }, 'object of { "suffix1 suffix2": [fn, ...], ... } as type arg');
    t.deepEqual(normalizeListeners('prefix', { '_1 _2': [a, b], '_3': [b, c] }), {
        prefix_1: [a, b],
        prefix_2: [a, b],
        prefix_3: [b, c],
    }, 'single type prefix, object of { "suffix1 suffix2": [fn, ...], ... }');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXplTGlzdGVuZXJzLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJub3JtYWxpemVMaXN0ZW5lcnMuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSw0QkFBNEIsQ0FBQTtBQUM3QyxPQUFPLGtCQUFrQixNQUFNLHNCQUFzQixDQUFBO0FBRXJELElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3JDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQTtJQUNsQixNQUFNLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUE7SUFDbEIsTUFBTSxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFBO0lBRWxCLENBQUMsQ0FBQyxTQUFTLENBQ1Qsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUM5QjtRQUNFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNYLEVBQ0QsdUNBQXVDLENBQUMsQ0FBQTtJQUUxQyxDQUFDLENBQUMsU0FBUyxDQUNULGtCQUFrQixDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFDcEM7UUFDRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDVixLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDWCxFQUNELDBDQUEwQyxDQUFDLENBQUE7SUFFN0MsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQ3BDLGtCQUFrQixDQUFDLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUN6QyxxREFBcUQsQ0FBQyxDQUFBO0lBRXhELENBQUMsQ0FBQyxTQUFTLENBQ1Qsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ25DO1FBQ0UsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNkLEVBQ0QsMENBQTBDLENBQUMsQ0FBQTtJQUU3QyxDQUFDLENBQUMsU0FBUyxDQUNULGtCQUFrQixDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUN4RDtRQUNFLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNqQixFQUNELHFEQUFxRCxDQUFDLENBQUE7SUFFeEQsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxrQkFBa0IsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDbkU7UUFDRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakIsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNqQixTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2xCLEVBQ0Qsc0VBQXNFLENBQUMsQ0FBQTtJQUV6RSxDQUFDLENBQUMsU0FBUyxDQUNULGtCQUFrQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQzlDO1FBQ0UsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNWLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDWCxFQUNELDZDQUE2QyxDQUFDLENBQUE7SUFFaEQsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxrQkFBa0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNyRDtRQUNFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDVixFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1YsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNYLEVBQ0QsNkRBQTZELENBQUMsQ0FBQTtJQUVoRSxDQUFDLENBQUMsU0FBUyxDQUNULGtCQUFrQixDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUMvRDtRQUNFLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2pCLEVBQ0QscUVBQXFFLENBQUMsQ0FBQTtJQUV4RSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0IG5vcm1hbGl6ZUxpc3RlbmVycyBmcm9tICcuL25vcm1hbGl6ZUxpc3RlbmVycydcblxudGVzdCgndXRpbHMvbm9ybWFsaXplTGlzdGVuZXJzJywgKHQpID0+IHtcbiAgY29uc3QgYSA9ICgpID0+IHt9XG4gIGNvbnN0IGIgPSAoKSA9PiB7fVxuICBjb25zdCBjID0gKCkgPT4ge31cblxuICB0LmRlZXBFcXVhbChcbiAgICBub3JtYWxpemVMaXN0ZW5lcnMoJ3R5cGUxJywgYSksXG4gICAge1xuICAgICAgdHlwZTE6IFthXSxcbiAgICB9LFxuICAgICdzaW5nbGUgdHlwZSwgc2luZ2xlIGxpc3RlbmVyIGZ1bmN0aW9uJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBub3JtYWxpemVMaXN0ZW5lcnMoJ3R5cGUxIHR5cGUyJywgYSksXG4gICAge1xuICAgICAgdHlwZTE6IFthXSxcbiAgICAgIHR5cGUyOiBbYV0sXG4gICAgfSxcbiAgICAnbXVsdGlwbGUgdHlwZXMsIHNpbmdsZSBsaXN0ZW5lciBmdW5jdGlvbicpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgbm9ybWFsaXplTGlzdGVuZXJzKCd0eXBlMSB0eXBlMicsIGEpLFxuICAgIG5vcm1hbGl6ZUxpc3RlbmVycyhbJ3R5cGUxJywgJ3R5cGUyJ10sIGEpLFxuICAgICdhcnJheSBvZiB0eXBlcyBlcXVpdmFsZW50IHRvIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcnKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIG5vcm1hbGl6ZUxpc3RlbmVycygndHlwZTEnLCBbYSwgYl0pLFxuICAgIHtcbiAgICAgIHR5cGUxOiBbYSwgYl0sXG4gICAgfSxcbiAgICAnc2luZ2xlIHR5cGUsIG11bHRpcGxlIGxpc3RlbmVyIGZ1bmN0aW9ucycpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgbm9ybWFsaXplTGlzdGVuZXJzKCdwcmVmaXgnLCB7IF8xOiBbYSwgYl0sIF8yOiBbYiwgY10gfSksXG4gICAge1xuICAgICAgcHJlZml4XzE6IFthLCBiXSxcbiAgICAgIHByZWZpeF8yOiBbYiwgY10sXG4gICAgfSxcbiAgICAnc2luZ2xlIHR5cGUgcHJlZml4LCBvYmplY3Qgb2YgeyBzdWZmaXg6IFtmbiwgLi4uXSB9JylcblxuICB0LmRlZXBFcXVhbChcbiAgICBub3JtYWxpemVMaXN0ZW5lcnMoJ3ByZWZpeDEgcHJlZml4MicsIFt7IF8xOiBbYSwgYl0sIF8yOiBbYiwgY10gfV0pLFxuICAgIHtcbiAgICAgIHByZWZpeDFfMTogW2EsIGJdLFxuICAgICAgcHJlZml4MV8yOiBbYiwgY10sXG4gICAgICBwcmVmaXgyXzE6IFthLCBiXSxcbiAgICAgIHByZWZpeDJfMjogW2IsIGNdLFxuICAgIH0sXG4gICAgJ211bHRpcGxlIHR5cGUgcHJlZml4ZXMsIHNpbmdsZSBsZW5ndGggYXJyYXkgb2YgeyBzdWZmaXg6IFtmbiwgLi4uXSB9JylcblxuICB0LmRlZXBFcXVhbChcbiAgICBub3JtYWxpemVMaXN0ZW5lcnMoeyBfMTogW2EsIGJdLCBfMjogW2IsIGNdIH0pLFxuICAgIHtcbiAgICAgIF8xOiBbYSwgYl0sXG4gICAgICBfMjogW2IsIGNdLFxuICAgIH0sXG4gICAgJ29iamVjdCBvZiB7IHN1ZmZpeDogW2ZuLCAuLi5dIH0gYXMgdHlwZSBhcmcnKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIG5vcm1hbGl6ZUxpc3RlbmVycyh7ICdfMSBfMic6IFthLCBiXSwgJ18zJzogW2IsIGNdIH0pLFxuICAgIHtcbiAgICAgIF8xOiBbYSwgYl0sXG4gICAgICBfMjogW2EsIGJdLFxuICAgICAgXzM6IFtiLCBjXSxcbiAgICB9LFxuICAgICdvYmplY3Qgb2YgeyBcInN1ZmZpeDEgc3VmZml4MlwiOiBbZm4sIC4uLl0sIC4uLiB9IGFzIHR5cGUgYXJnJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBub3JtYWxpemVMaXN0ZW5lcnMoJ3ByZWZpeCcsIHsgJ18xIF8yJzogW2EsIGJdLCAnXzMnOiBbYiwgY10gfSksXG4gICAge1xuICAgICAgcHJlZml4XzE6IFthLCBiXSxcbiAgICAgIHByZWZpeF8yOiBbYSwgYl0sXG4gICAgICBwcmVmaXhfMzogW2IsIGNdLFxuICAgIH0sXG4gICAgJ3NpbmdsZSB0eXBlIHByZWZpeCwgb2JqZWN0IG9mIHsgXCJzdWZmaXgxIHN1ZmZpeDJcIjogW2ZuLCAuLi5dLCAuLi4gfScpXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==