import * as arr from './arr';
import * as dom from './domUtils';
import * as is from './is';
import win from './window';
export function warnOnce(method, message) {
    let warned = false;
    // eslint-disable-next-line no-shadow
    return function () {
        if (!warned) {
            win.window.console.warn(message);
            warned = true;
        }
        return method.apply(this, arguments);
    };
}
// http://stackoverflow.com/a/5634528/2280888
export function _getQBezierValue(t, p1, p2, p3) {
    const iT = 1 - t;
    return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
}
export function getQuadraticCurvePoint(startX, startY, cpX, cpY, endX, endY, position) {
    return {
        x: _getQBezierValue(position, startX, cpX, endX),
        y: _getQBezierValue(position, startY, cpY, endY),
    };
}
// http://gizma.com/easing/
export function easeOutQuad(t, b, c, d) {
    t /= d;
    return -c * t * (t - 2) + b;
}
export function copyAction(dest, src) {
    dest.name = src.name;
    dest.axis = src.axis;
    dest.edges = src.edges;
    return dest;
}
export { default as browser } from './browser';
export { default as clone } from './clone';
export { default as events } from './events';
export { default as extend } from './extend';
export { default as getOriginXY } from './getOriginXY';
export { default as hypot } from './hypot';
export { default as normalizeListeners } from './normalizeListeners';
export { default as pointer } from './pointerUtils';
export { default as raf } from './raf';
export { default as rect } from './rect';
export { default as Signals } from './Signals';
export { win, arr, dom, is };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQTtBQUM1QixPQUFPLEtBQUssR0FBRyxNQUFNLFlBQVksQ0FBQTtBQUNqQyxPQUFPLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUMxQixPQUFPLEdBQUcsTUFBTSxVQUFVLENBQUE7QUFFMUIsTUFBTSxVQUFVLFFBQVEsQ0FBYyxNQUE2QixFQUFFLE9BQWU7SUFDbEYsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBRWxCLHFDQUFxQztJQUNyQyxPQUFPO1FBQ0wsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNWLEdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUN6QyxNQUFNLEdBQUcsSUFBSSxDQUFBO1NBQ2Q7UUFFRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ3RDLENBQUMsQ0FBQTtBQUNILENBQUM7QUFFRCw2Q0FBNkM7QUFDN0MsTUFBTSxVQUFVLGdCQUFnQixDQUFFLENBQVMsRUFBRSxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVU7SUFDN0UsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNoQixPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNwRCxDQUFDO0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUNwQyxNQUFjLEVBQUUsTUFBYyxFQUFFLEdBQVcsRUFBRSxHQUFXLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxRQUFnQjtJQUN0RyxPQUFPO1FBQ0wsQ0FBQyxFQUFHLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQztRQUNqRCxDQUFDLEVBQUcsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDO0tBQ2xELENBQUE7QUFDSCxDQUFDO0FBRUQsMkJBQTJCO0FBQzNCLE1BQU0sVUFBVSxXQUFXLENBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztJQUNyRSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ04sT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzdCLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFFLElBQTBCLEVBQUUsR0FBeUI7SUFDL0UsSUFBSSxDQUFDLElBQUksR0FBSSxHQUFHLENBQUMsSUFBSSxDQUFBO0lBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUksR0FBRyxDQUFDLElBQUksQ0FBQTtJQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUE7SUFFdEIsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDO0FBRUQsT0FBTyxFQUFFLE9BQU8sSUFBSSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDOUMsT0FBTyxFQUFFLE9BQU8sSUFBSSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFDMUMsT0FBTyxFQUFFLE9BQU8sSUFBSSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDNUMsT0FBTyxFQUFFLE9BQU8sSUFBSSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDNUMsT0FBTyxFQUFFLE9BQU8sSUFBSSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDdEQsT0FBTyxFQUFFLE9BQU8sSUFBSSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFDMUMsT0FBTyxFQUFFLE9BQU8sSUFBSSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQ3BFLE9BQU8sRUFBRSxPQUFPLElBQUksT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDbkQsT0FBTyxFQUFFLE9BQU8sSUFBSSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFDdEMsT0FBTyxFQUFFLE9BQU8sSUFBSSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDeEMsT0FBTyxFQUFFLE9BQU8sSUFBSSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDOUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXJyIGZyb20gJy4vYXJyJ1xuaW1wb3J0ICogYXMgZG9tIGZyb20gJy4vZG9tVXRpbHMnXG5pbXBvcnQgKiBhcyBpcyBmcm9tICcuL2lzJ1xuaW1wb3J0IHdpbiBmcm9tICcuL3dpbmRvdydcblxuZXhwb3J0IGZ1bmN0aW9uIHdhcm5PbmNlPFQ+ICh0aGlzOiBULCBtZXRob2Q6ICguLi5hcmdzOiBhbnkpID0+IGFueSwgbWVzc2FnZTogc3RyaW5nKSB7XG4gIGxldCB3YXJuZWQgPSBmYWxzZVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGlzOiBUKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgICh3aW4gYXMgYW55KS53aW5kb3cuY29uc29sZS53YXJuKG1lc3NhZ2UpXG4gICAgICB3YXJuZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gIH1cbn1cblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTYzNDUyOC8yMjgwODg4XG5leHBvcnQgZnVuY3Rpb24gX2dldFFCZXppZXJWYWx1ZSAodDogbnVtYmVyLCBwMTogbnVtYmVyLCBwMjogbnVtYmVyLCBwMzogbnVtYmVyKSB7XG4gIGNvbnN0IGlUID0gMSAtIHRcbiAgcmV0dXJuIGlUICogaVQgKiBwMSArIDIgKiBpVCAqIHQgKiBwMiArIHQgKiB0ICogcDNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1YWRyYXRpY0N1cnZlUG9pbnQgKFxuICBzdGFydFg6IG51bWJlciwgc3RhcnRZOiBudW1iZXIsIGNwWDogbnVtYmVyLCBjcFk6IG51bWJlciwgZW5kWDogbnVtYmVyLCBlbmRZOiBudW1iZXIsIHBvc2l0aW9uOiBudW1iZXIpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiAgX2dldFFCZXppZXJWYWx1ZShwb3NpdGlvbiwgc3RhcnRYLCBjcFgsIGVuZFgpLFxuICAgIHk6ICBfZ2V0UUJlemllclZhbHVlKHBvc2l0aW9uLCBzdGFydFksIGNwWSwgZW5kWSksXG4gIH1cbn1cblxuLy8gaHR0cDovL2dpem1hLmNvbS9lYXNpbmcvXG5leHBvcnQgZnVuY3Rpb24gZWFzZU91dFF1YWQgKHQ6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIsIGQ6IG51bWJlcikge1xuICB0IC89IGRcbiAgcmV0dXJuIC1jICogdCAqICh0IC0gMikgKyBiXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5QWN0aW9uIChkZXN0OiBJbnRlcmFjdC5BY3Rpb25Qcm9wcywgc3JjOiBJbnRlcmFjdC5BY3Rpb25Qcm9wcykge1xuICBkZXN0Lm5hbWUgID0gc3JjLm5hbWVcbiAgZGVzdC5heGlzICA9IHNyYy5heGlzXG4gIGRlc3QuZWRnZXMgPSBzcmMuZWRnZXNcblxuICByZXR1cm4gZGVzdFxufVxuXG5leHBvcnQgeyBkZWZhdWx0IGFzIGJyb3dzZXIgfSBmcm9tICcuL2Jyb3dzZXInXG5leHBvcnQgeyBkZWZhdWx0IGFzIGNsb25lIH0gZnJvbSAnLi9jbG9uZSdcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXZlbnRzIH0gZnJvbSAnLi9ldmVudHMnXG5leHBvcnQgeyBkZWZhdWx0IGFzIGV4dGVuZCB9IGZyb20gJy4vZXh0ZW5kJ1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBnZXRPcmlnaW5YWSB9IGZyb20gJy4vZ2V0T3JpZ2luWFknXG5leHBvcnQgeyBkZWZhdWx0IGFzIGh5cG90IH0gZnJvbSAnLi9oeXBvdCdcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbm9ybWFsaXplTGlzdGVuZXJzIH0gZnJvbSAnLi9ub3JtYWxpemVMaXN0ZW5lcnMnXG5leHBvcnQgeyBkZWZhdWx0IGFzIHBvaW50ZXIgfSBmcm9tICcuL3BvaW50ZXJVdGlscydcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmFmIH0gZnJvbSAnLi9yYWYnXG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlY3QgfSBmcm9tICcuL3JlY3QnXG5leHBvcnQgeyBkZWZhdWx0IGFzIFNpZ25hbHMgfSBmcm9tICcuL1NpZ25hbHMnXG5leHBvcnQgeyB3aW4sIGFyciwgZG9tLCBpcyB9XG4iXX0=