// tslint:disable variable-name
import isWindow from './isWindow';
import win from './window';
export const window = (thing) => thing === win.window || isWindow(thing);
export const docFrag = (thing) => object(thing) && thing.nodeType === 11;
export const object = (thing) => !!thing && (typeof thing === 'object');
export const func = (thing) => typeof thing === 'function';
export const number = (thing) => typeof thing === 'number';
export const bool = (thing) => typeof thing === 'boolean';
export const string = (thing) => typeof thing === 'string';
export const element = (thing) => {
    if (!thing || (typeof thing !== 'object')) {
        return false;
    }
    const _window = win.getWindow(thing) || win.window;
    return (/object|function/.test(typeof _window.Element)
        ? thing instanceof _window.Element // DOM2
        : thing.nodeType === 1 && typeof thing.nodeName === 'string');
};
export const plainObject = (thing) => object(thing) &&
    !!thing.constructor &&
    /function Object\b/.test(thing.constructor.toString());
export const array = (thing) => (object(thing) &&
    (typeof thing.length !== 'undefined') &&
    func(thing.splice));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0I7QUFFL0IsT0FBTyxRQUFRLE1BQU0sWUFBWSxDQUFBO0FBQ2pDLE9BQU8sR0FBRyxNQUFNLFVBQVUsQ0FBQTtBQUUxQixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQW1CLEVBQUUsQ0FDcEQsS0FBSyxLQUFLLEdBQUcsQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBRXpDLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVUsRUFBNkIsRUFBRSxDQUMvRCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxFQUFFLENBQUE7QUFFeEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVSxFQUFxQyxFQUFFLENBQ3RFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQTtBQUV4QyxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxLQUFVLEVBQWtDLEVBQUUsQ0FDakUsT0FBTyxLQUFLLEtBQUssVUFBVSxDQUFBO0FBRTdCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQVUsRUFBbUIsRUFBRSxDQUNwRCxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUE7QUFFM0IsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsS0FBVSxFQUFvQixFQUFFLENBQ25ELE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FBQTtBQUU1QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQW1CLEVBQUUsQ0FDcEQsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFBO0FBRTNCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVUsRUFBb0IsRUFBRTtJQUN0RCxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLEVBQUU7UUFBRSxPQUFPLEtBQUssQ0FBQTtLQUFFO0lBRTNELE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQTtJQUVsRCxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNwRCxDQUFDLENBQUMsS0FBSyxZQUFZLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTztRQUMxQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFBO0FBQ2pFLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBa0IsQ0FBQyxLQUFVLEVBQXFDLEVBQUUsQ0FDMUYsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNiLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVztJQUNuQixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO0FBRXhELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVUsRUFBa0IsRUFBRSxDQUNsRCxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZCxDQUFDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxXQUFXLENBQUM7SUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGUgdmFyaWFibGUtbmFtZVxuXG5pbXBvcnQgaXNXaW5kb3cgZnJvbSAnLi9pc1dpbmRvdydcbmltcG9ydCB3aW4gZnJvbSAnLi93aW5kb3cnXG5cbmV4cG9ydCBjb25zdCB3aW5kb3cgPSAodGhpbmc6IGFueSk6IHRoaW5nIGlzIFdpbmRvdyA9PlxuICB0aGluZyA9PT0gd2luLndpbmRvdyB8fCBpc1dpbmRvdyh0aGluZylcblxuZXhwb3J0IGNvbnN0IGRvY0ZyYWcgPSAodGhpbmc6IGFueSk6IHRoaW5nIGlzIERvY3VtZW50RnJhZ21lbnQgPT5cbiAgb2JqZWN0KHRoaW5nKSAmJiB0aGluZy5ub2RlVHlwZSA9PT0gMTFcblxuZXhwb3J0IGNvbnN0IG9iamVjdCA9ICh0aGluZzogYW55KTogdGhpbmcgaXMgeyBbaW5kZXg6IHN0cmluZ106IGFueSB9ID0+XG4gICEhdGhpbmcgJiYgKHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCcpXG5cbmV4cG9ydCBjb25zdCBmdW5jID0gKHRoaW5nOiBhbnkpOiB0aGluZyBpcyAoLi4uYXJnczogYW55KSA9PiBhbnkgPT5cbiAgdHlwZW9mIHRoaW5nID09PSAnZnVuY3Rpb24nXG5cbmV4cG9ydCBjb25zdCBudW1iZXIgPSAodGhpbmc6IGFueSk6IHRoaW5nIGlzIG51bWJlciA9PlxuICB0eXBlb2YgdGhpbmcgPT09ICdudW1iZXInXG5cbmV4cG9ydCBjb25zdCBib29sID0gKHRoaW5nOiBhbnkpOiB0aGluZyBpcyBib29sZWFuID0+XG4gIHR5cGVvZiB0aGluZyA9PT0gJ2Jvb2xlYW4nXG5cbmV4cG9ydCBjb25zdCBzdHJpbmcgPSAodGhpbmc6IGFueSk6IHRoaW5nIGlzIHN0cmluZyA9PlxuICB0eXBlb2YgdGhpbmcgPT09ICdzdHJpbmcnXG5cbmV4cG9ydCBjb25zdCBlbGVtZW50ID0gKHRoaW5nOiBhbnkpOiB0aGluZyBpcyBFbGVtZW50ID0+IHtcbiAgaWYgKCF0aGluZyB8fCAodHlwZW9mIHRoaW5nICE9PSAnb2JqZWN0JykpIHsgcmV0dXJuIGZhbHNlIH1cblxuICBjb25zdCBfd2luZG93ID0gd2luLmdldFdpbmRvdyh0aGluZykgfHwgd2luLndpbmRvd1xuXG4gIHJldHVybiAoL29iamVjdHxmdW5jdGlvbi8udGVzdCh0eXBlb2YgX3dpbmRvdy5FbGVtZW50KVxuICAgID8gdGhpbmcgaW5zdGFuY2VvZiBfd2luZG93LkVsZW1lbnQgLy8gRE9NMlxuICAgIDogdGhpbmcubm9kZVR5cGUgPT09IDEgJiYgdHlwZW9mIHRoaW5nLm5vZGVOYW1lID09PSAnc3RyaW5nJylcbn1cblxuZXhwb3J0IGNvbnN0IHBsYWluT2JqZWN0OiB0eXBlb2Ygb2JqZWN0ID0gKHRoaW5nOiBhbnkpOiB0aGluZyBpcyB7IFtpbmRleDogc3RyaW5nXTogYW55IH0gPT5cbiAgb2JqZWN0KHRoaW5nKSAmJlxuICAhIXRoaW5nLmNvbnN0cnVjdG9yICYmXG4gIC9mdW5jdGlvbiBPYmplY3RcXGIvLnRlc3QodGhpbmcuY29uc3RydWN0b3IudG9TdHJpbmcoKSlcblxuZXhwb3J0IGNvbnN0IGFycmF5ID0gKHRoaW5nOiBhbnkpOiB0aGluZyBpcyBhbnlbXSA9PlxuICAob2JqZWN0KHRoaW5nKSAmJlxuICAodHlwZW9mIHRoaW5nLmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gIGZ1bmModGhpbmcuc3BsaWNlKSlcbiJdfQ==