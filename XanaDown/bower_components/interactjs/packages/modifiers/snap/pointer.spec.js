import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import snap from '../snap/pointer';
test('modifiers/snap', (t) => {
    const { interaction, interactable, } = helpers.testEnv();
    const origin = { x: 120, y: 120 };
    interactable.options.TEST = { origin };
    interaction.interactable = interactable;
    interaction.prepared = { name: 'TEST' };
    interaction._interacting = true;
    let funcArgs = null;
    const target0 = Object.freeze({ x: 50, y: 100 });
    // eslint-disable-next-line no-restricted-syntax, no-shadow
    const targetFunc = (x, y, _interaction, offset, index, ...unexpected) => {
        funcArgs = { x, y, offset, index, unexpected };
        return target0;
    };
    const relativePoint = { x: 0, y: 0 };
    const options = {
        offset: null,
        offsetWithOrigin: true,
        targets: [
            target0,
            targetFunc,
        ],
        range: Infinity,
        relativePoints: [relativePoint],
    };
    const state = {
        options,
        realX: 0,
        realY: 0,
    };
    const pageCoords = Object.freeze({ x: 200, y: 300 });
    const arg = {
        interaction,
        interactable,
        state,
        pageCoords,
        coords: { ...pageCoords },
        rect: { top: 0, left: 0, bottom: 100, right: 100, width: 100, height: 100 },
        startOffset: { top: 0, left: 0, bottom: 0, right: 0 },
    };
    snap.start(arg);
    snap.set(arg);
    t.deepEqual(arg.coords, { x: target0.x + origin.x, y: target0.y + origin.y }, 'snaps to target and adds origin which will be subtracted by InteractEvent');
    arg.coords = { ...pageCoords };
    state.options.targets = [targetFunc];
    snap.start(arg);
    snap.set(arg);
    t.deepEqual(funcArgs, {
        x: pageCoords.x - origin.x,
        y: pageCoords.y - origin.y,
        offset: {
            x: origin.x,
            y: origin.y,
            relativePoint,
            index: 0,
        },
        index: 0,
        unexpected: [],
    }, 'x, y, interaction, offset, index are passed to target function; origin subtracted from x, y');
    arg.coords = { ...pageCoords };
    options.offset = { x: 300, y: 300 };
    options.offsetWithOrigin = false;
    snap.start(arg);
    snap.set(arg);
    t.deepEqual(arg.coords, { x: target0.x + 300, y: target0.y + 300 }, 'origin not added to target when !options.offsetWithOrigin');
    t.deepEqual({ x: funcArgs.x, y: funcArgs.y }, { x: pageCoords.x - origin.x - 300, y: pageCoords.y - origin.y - 300 }, 'origin still subtracted from function target x, y args when !options.offsetWithOrigin');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicG9pbnRlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxJQUFJLE1BQU0saUJBQWlCLENBQUE7QUFFbEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDM0IsTUFBTSxFQUNKLFdBQVcsRUFDWCxZQUFZLEdBQ2IsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDckIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQTtJQUVqQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFBO0lBQ3RDLFdBQVcsQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFBO0lBQ3ZDLFdBQVcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUE7SUFDdkMsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUE7SUFFL0IsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFBO0lBQ25CLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUcsRUFBRSxFQUFFLENBQUMsRUFBRyxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQ2xELDJEQUEyRDtJQUMzRCxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxVQUFVLEVBQUUsRUFBRTtRQUN0RSxRQUFRLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUE7UUFDOUMsT0FB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QUMsU0FBUyxDQUNULEdBQUcsQ0FBQyxNQUFNLEVBQ1YsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQzFDLDJEQUEyRCxDQUM1RCxDQUFBO0lBRUQsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQ2hDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFDdEUsdUZBQXVGLENBQ3hGLENBQUE7SUFFRCxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Rlc3RzL19oZWxwZXJzJ1xuaW1wb3J0IHNuYXAgZnJvbSAnLi4vc25hcC9wb2ludGVyJ1xuXG50ZXN0KCdtb2RpZmllcnMvc25hcCcsICh0KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBpbnRlcmFjdGlvbixcbiAgICBpbnRlcmFjdGFibGUsXG4gIH0gPSBoZWxwZXJzLnRlc3RFbnYoKVxuICBjb25zdCBvcmlnaW4gPSB7IHg6IDEyMCwgeTogMTIwIH1cblxuICBpbnRlcmFjdGFibGUub3B0aW9ucy5URVNUID0geyBvcmlnaW4gfVxuICBpbnRlcmFjdGlvbi5pbnRlcmFjdGFibGUgPSBpbnRlcmFjdGFibGVcbiAgaW50ZXJhY3Rpb24ucHJlcGFyZWQgPSB7IG5hbWU6ICdURVNUJyB9XG4gIGludGVyYWN0aW9uLl9pbnRlcmFjdGluZyA9IHRydWVcblxuICBsZXQgZnVuY0FyZ3MgPSBudWxsXG4gIGNvbnN0IHRhcmdldDAgPSBPYmplY3QuZnJlZXplKHsgeDogIDUwLCB5OiAgMTAwIH0pXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tc2hhZG93XG4gIGNvbnN0IHRhcmdldEZ1bmMgPSAoeCwgeSwgX2ludGVyYWN0aW9uLCBvZmZzZXQsIGluZGV4LCAuLi51bmV4cGVjdGVkKSA9PiB7XG4gICAgZnVuY0FyZ3MgPSB7IHgsIHksIG9mZnNldCwgaW5kZXgsIHVuZXhwZWN0ZWQgfVxuICAgIHJldHVybiB0YXJnZXQwXG4gIH1cbiAgY29uc3QgcmVsYXRpdmVQb2ludCA9IHsgeDogMCwgeTogMCB9XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgb2Zmc2V0OiBudWxsLFxuICAgIG9mZnNldFdpdGhPcmlnaW46IHRydWUsXG4gICAgdGFyZ2V0czogW1xuICAgICAgdGFyZ2V0MCxcbiAgICAgIHRhcmdldEZ1bmMsXG4gICAgXSxcbiAgICByYW5nZTogSW5maW5pdHksXG4gICAgcmVsYXRpdmVQb2ludHM6IFtyZWxhdGl2ZVBvaW50XSxcbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIG9wdGlvbnMsXG4gICAgcmVhbFg6IDAsXG4gICAgcmVhbFk6IDAsXG4gIH1cbiAgY29uc3QgcGFnZUNvb3JkcyA9IE9iamVjdC5mcmVlemUoeyB4OiAyMDAsIHk6IDMwMCB9KVxuICBjb25zdCBhcmcgPSB7XG4gICAgaW50ZXJhY3Rpb24sXG4gICAgaW50ZXJhY3RhYmxlLFxuICAgIHN0YXRlLFxuICAgIHBhZ2VDb29yZHMsXG4gICAgY29vcmRzOiB7IC4uLnBhZ2VDb29yZHMgfSxcbiAgICByZWN0OiB7IHRvcDogMCwgbGVmdDogMCwgYm90dG9tOiAxMDAsIHJpZ2h0OiAxMDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwIH0sXG4gICAgc3RhcnRPZmZzZXQ6IHsgdG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDAsIHJpZ2h0OiAwIH0sXG4gIH0gYXMgYW55XG5cbiAgc25hcC5zdGFydChhcmcpXG4gIHNuYXAuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChcbiAgICBhcmcuY29vcmRzLFxuICAgIHsgeDogdGFyZ2V0MC54ICsgb3JpZ2luLngsIHk6IHRhcmdldDAueSArIG9yaWdpbi55IH0sXG4gICAgJ3NuYXBzIHRvIHRhcmdldCBhbmQgYWRkcyBvcmlnaW4gd2hpY2ggd2lsbCBiZSBzdWJ0cmFjdGVkIGJ5IEludGVyYWN0RXZlbnQnXG4gIClcblxuICBhcmcuY29vcmRzID0geyAuLi5wYWdlQ29vcmRzIH1cbiAgc3RhdGUub3B0aW9ucy50YXJnZXRzID0gW3RhcmdldEZ1bmNdXG4gIHNuYXAuc3RhcnQoYXJnKVxuICBzbmFwLnNldChhcmcpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgZnVuY0FyZ3MsXG4gICAge1xuICAgICAgeDogcGFnZUNvb3Jkcy54IC0gb3JpZ2luLngsXG4gICAgICB5OiBwYWdlQ29vcmRzLnkgLSBvcmlnaW4ueSxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICB4OiBvcmlnaW4ueCxcbiAgICAgICAgeTogb3JpZ2luLnksXG4gICAgICAgIHJlbGF0aXZlUG9pbnQsXG4gICAgICAgIGluZGV4OiAwLFxuICAgICAgfSxcbiAgICAgIGluZGV4OiAwLFxuICAgICAgdW5leHBlY3RlZDogW10sXG4gICAgfSxcbiAgICAneCwgeSwgaW50ZXJhY3Rpb24sIG9mZnNldCwgaW5kZXggYXJlIHBhc3NlZCB0byB0YXJnZXQgZnVuY3Rpb247IG9yaWdpbiBzdWJ0cmFjdGVkIGZyb20geCwgeSdcbiAgKVxuXG4gIGFyZy5jb29yZHMgPSB7IC4uLnBhZ2VDb29yZHMgfVxuICBvcHRpb25zLm9mZnNldCA9IHsgeDogMzAwLCB5OiAzMDAgfVxuICBvcHRpb25zLm9mZnNldFdpdGhPcmlnaW4gPSBmYWxzZVxuICBzbmFwLnN0YXJ0KGFyZylcbiAgc25hcC5zZXQoYXJnKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGFyZy5jb29yZHMsXG4gICAgeyB4OiB0YXJnZXQwLnggKyAzMDAsIHk6IHRhcmdldDAueSArIDMwMCB9LFxuICAgICdvcmlnaW4gbm90IGFkZGVkIHRvIHRhcmdldCB3aGVuICFvcHRpb25zLm9mZnNldFdpdGhPcmlnaW4nXG4gIClcblxuICB0LmRlZXBFcXVhbChcbiAgICB7IHg6IGZ1bmNBcmdzLngsIHk6IGZ1bmNBcmdzLnkgfSxcbiAgICB7IHg6IHBhZ2VDb29yZHMueCAtIG9yaWdpbi54IC0gMzAwLCB5OiBwYWdlQ29vcmRzLnkgLSBvcmlnaW4ueSAtIDMwMCB9LFxuICAgICdvcmlnaW4gc3RpbGwgc3VidHJhY3RlZCBmcm9tIGZ1bmN0aW9uIHRhcmdldCB4LCB5IGFyZ3Mgd2hlbiAhb3B0aW9ucy5vZmZzZXRXaXRoT3JpZ2luJ1xuICApXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==