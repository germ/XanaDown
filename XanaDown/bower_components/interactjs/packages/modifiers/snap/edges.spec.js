import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import snapEdges from '../snap/edges';
test('modifiers/snap/edges', (t) => {
    const rect = { top: 0, left: 0, bottom: 100, right: 100 };
    const { interaction, interactable, } = helpers.testEnv({ rect });
    interaction.interactable = interactable;
    interaction._interacting = true;
    const target0 = Object.freeze({
        left: 50,
        right: 150,
        top: 0,
        bottom: 100,
    });
    const options = {
        targets: [
            { ...target0 },
        ],
        range: Infinity,
    };
    const pageCoords = Object.freeze({ x: 0, y: 0 });
    const arg = {
        interaction,
        interactable: interaction.interactable,
        state: null,
        pageCoords,
        coords: { ...pageCoords },
        offset: [{ x: 0, y: 0 }],
    };
    // resize from top left
    interaction.prepared.edges = { top: true, left: true };
    arg.state = { options };
    snapEdges.start(arg);
    snapEdges.set(arg);
    t.deepEqual(arg.coords, { x: target0.left, y: target0.top }, 'modified coords are correct');
    // resize from bottom right
    interaction.prepared.edges = { bottom: true, right: true };
    arg.state = { options };
    snapEdges.start(arg);
    snapEdges.set(arg);
    t.deepEqual(arg.coords, { x: target0.right, y: target0.bottom }, 'modified coord are correct');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRnZXMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVkZ2VzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sNEJBQTRCLENBQUE7QUFDN0MsT0FBTyxLQUFLLE9BQU8sTUFBTSxpQ0FBaUMsQ0FBQTtBQUMxRCxPQUFPLFNBQVMsTUFBTSxlQUFlLENBQUE7QUFFckMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDakMsTUFBTSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDekQsTUFBTSxFQUNKLFdBQVcsRUFDWCxZQUFZLEdBQ2IsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUM3QixXQUFXLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQTtJQUN2QyxXQUFXLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQTtJQUUvQixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzVCLElBQUksRUFBRSxFQUFFO1FBQ1IsS0FBSyxFQUFFLEdBQUc7UUFDVixHQUFHLEVBQUUsQ0FBQztRQUNOLE1BQU0sRUFBRSxHQUFHO0tBQ1osQ0FBQyxDQUFBO0lBQ0YsTUFBTSxPQUFPLEdBQUc7UUFDZCxPQUFPLEVBQUU7WUFDUCxFQUFFLEdBQUcsT0FBTyxFQUFFO1NBQ2Y7UUFDRCxLQUFLLEVBQUUsUUFBUTtLQUNoQixDQUFBO0lBQ0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDaEQsTUFBTSxHQUFHLEdBQUc7UUFDVixXQUFXO1FBQ1gsWUFBWSxFQUFFLFdBQVcsQ0FBQyxZQUFZO1FBQ3RDLEtBQUssRUFBRSxJQUFJO1FBQ1gsVUFBVTtRQUNWLE1BQU0sRUFBRSxFQUFFLEdBQUcsVUFBVSxFQUFFO1FBQ3pCLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDekIsQ0FBQTtJQUVELHVCQUF1QjtJQUN2QixXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFBO0lBRXRELEdBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQTtJQUN2QixTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3BCLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFbEIsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxHQUFHLENBQUMsTUFBTSxFQUNWLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFDbkMsNkJBQTZCLENBQUMsQ0FBQTtJQUVoQywyQkFBMkI7SUFDM0IsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQTtJQUUxRCxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUE7SUFDdkIsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNwQixTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRWxCLENBQUMsQ0FBQyxTQUFTLENBQ1QsR0FBRyxDQUFDLE1BQU0sRUFDVixFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQ3ZDLDRCQUE0QixDQUFDLENBQUE7SUFFL0IsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9faGVscGVycydcbmltcG9ydCBzbmFwRWRnZXMgZnJvbSAnLi4vc25hcC9lZGdlcydcblxudGVzdCgnbW9kaWZpZXJzL3NuYXAvZWRnZXMnLCAodCkgPT4ge1xuICBjb25zdCByZWN0ID0geyB0b3A6IDAsIGxlZnQ6IDAsIGJvdHRvbTogMTAwLCByaWdodDogMTAwIH1cbiAgY29uc3Qge1xuICAgIGludGVyYWN0aW9uLFxuICAgIGludGVyYWN0YWJsZSxcbiAgfSA9IGhlbHBlcnMudGVzdEVudih7IHJlY3QgfSlcbiAgaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlID0gaW50ZXJhY3RhYmxlXG4gIGludGVyYWN0aW9uLl9pbnRlcmFjdGluZyA9IHRydWVcblxuICBjb25zdCB0YXJnZXQwID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgbGVmdDogNTAsXG4gICAgcmlnaHQ6IDE1MCxcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiAxMDAsXG4gIH0pXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgdGFyZ2V0czogW1xuICAgICAgeyAuLi50YXJnZXQwIH0sXG4gICAgXSxcbiAgICByYW5nZTogSW5maW5pdHksXG4gIH1cbiAgY29uc3QgcGFnZUNvb3JkcyA9IE9iamVjdC5mcmVlemUoeyB4OiAwLCB5OiAwIH0pXG4gIGNvbnN0IGFyZyA9IHtcbiAgICBpbnRlcmFjdGlvbixcbiAgICBpbnRlcmFjdGFibGU6IGludGVyYWN0aW9uLmludGVyYWN0YWJsZSxcbiAgICBzdGF0ZTogbnVsbCxcbiAgICBwYWdlQ29vcmRzLFxuICAgIGNvb3JkczogeyAuLi5wYWdlQ29vcmRzIH0sXG4gICAgb2Zmc2V0OiBbeyB4OiAwLCB5OiAwIH1dLFxuICB9XG5cbiAgLy8gcmVzaXplIGZyb20gdG9wIGxlZnRcbiAgaW50ZXJhY3Rpb24ucHJlcGFyZWQuZWRnZXMgPSB7IHRvcDogdHJ1ZSwgbGVmdDogdHJ1ZSB9XG5cbiAgYXJnLnN0YXRlID0geyBvcHRpb25zIH1cbiAgc25hcEVkZ2VzLnN0YXJ0KGFyZylcbiAgc25hcEVkZ2VzLnNldChhcmcpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgYXJnLmNvb3JkcyxcbiAgICB7IHg6IHRhcmdldDAubGVmdCwgeTogdGFyZ2V0MC50b3AgfSxcbiAgICAnbW9kaWZpZWQgY29vcmRzIGFyZSBjb3JyZWN0JylcblxuICAvLyByZXNpemUgZnJvbSBib3R0b20gcmlnaHRcbiAgaW50ZXJhY3Rpb24ucHJlcGFyZWQuZWRnZXMgPSB7IGJvdHRvbTogdHJ1ZSwgcmlnaHQ6IHRydWUgfVxuXG4gIGFyZy5zdGF0ZSA9IHsgb3B0aW9ucyB9XG4gIHNuYXBFZGdlcy5zdGFydChhcmcpXG4gIHNuYXBFZGdlcy5zZXQoYXJnKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGFyZy5jb29yZHMsXG4gICAgeyB4OiB0YXJnZXQwLnJpZ2h0LCB5OiB0YXJnZXQwLmJvdHRvbSB9LFxuICAgICdtb2RpZmllZCBjb29yZCBhcmUgY29ycmVjdCcpXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==