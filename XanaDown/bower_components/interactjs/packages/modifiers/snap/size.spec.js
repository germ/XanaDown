import test from '@interactjs/_dev/test/test';
import Interaction from '@interactjs/core/Interaction';
import { mockInteractable, mockSignals } from '@interactjs/core/tests/_helpers';
import snapSize from '../snap/size';
test('modifiers/snapSize', (t) => {
    const interaction = new Interaction({ signals: mockSignals() });
    interaction.interactable = mockInteractable();
    interaction.interactable.getRect = () => ({ top: 0, left: 0, bottom: 100, right: 100 });
    interaction.prepared = {
        name: null,
        edges: { top: true, left: true, bottom: false, right: false },
    };
    interaction._interacting = true;
    const target0 = Object.freeze({ x: 50, y: 100 });
    const options = {
        targets: [
            { ...target0 },
        ],
        range: Infinity,
    };
    const state = {
        options,
        delta: { x: 0, y: 0 },
        offset: [{ x: 0, y: 0 }],
    };
    const pageCoords = Object.freeze({ x: 10, y: 20 });
    const arg = {
        interaction,
        interactable: interaction.interactable,
        state,
        pageCoords,
        coords: { ...pageCoords },
    };
    snapSize.start(arg);
    snapSize.set(arg);
    t.deepEqual(arg.coords, target0, 'snapSize.set single target, zereo offset');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2l6ZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sV0FBVyxNQUFNLDhCQUE4QixDQUFBO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQTtBQUMvRSxPQUFPLFFBQVEsTUFBTSxjQUFjLENBQUE7QUFFbkMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDL0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQVMsQ0FBQyxDQUFBO0lBQ3RFLFdBQVcsQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQTtJQUM3QyxXQUFXLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBVSxDQUFBLENBQUE7SUFDOUYsV0FBVyxDQUFDLFFBQVEsR0FBRztRQUNyQixJQUFJLEVBQUUsSUFBSTtRQUNWLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7S0FDOUQsQ0FBQTtJQUNELFdBQVcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFBO0lBRS9CLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUcsRUFBRSxFQUFFLENBQUMsRUFBRyxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQ2xELE1BQU0sT0FBTyxHQUFHO1FBQ2QsT0FBTyxFQUFFO1lBQ1AsRUFBRSxHQUFHLE9BQU8sRUFBRTtTQUNmO1FBQ0QsS0FBSyxFQUFFLFFBQVE7S0FDaEIsQ0FBQTtJQUNELE1BQU0sS0FBSyxHQUFHO1FBQ1osT0FBTztRQUNQLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNyQixNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0tBQ3pCLENBQUE7SUFDRCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNsRCxNQUFNLEdBQUcsR0FBRztRQUNWLFdBQVc7UUFDWCxZQUFZLEVBQUUsV0FBVyxDQUFDLFlBQVk7UUFDdEMsS0FBSztRQUNMLFVBQVU7UUFDVixNQUFNLEVBQUUsRUFBRSxHQUFHLFVBQVUsRUFBRTtLQUMxQixDQUFBO0lBRUQsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNuQixRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRWpCLENBQUMsQ0FBQyxTQUFTLENBQ1QsR0FBRyxDQUFDLE1BQU0sRUFDVixPQUFPLEVBQ1AsMENBQTBDLENBQzNDLENBQUE7SUFFRCxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0IEludGVyYWN0aW9uIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvSW50ZXJhY3Rpb24nXG5pbXBvcnQgeyBtb2NrSW50ZXJhY3RhYmxlLCBtb2NrU2lnbmFscyB9IGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvX2hlbHBlcnMnXG5pbXBvcnQgc25hcFNpemUgZnJvbSAnLi4vc25hcC9zaXplJ1xuXG50ZXN0KCdtb2RpZmllcnMvc25hcFNpemUnLCAodCkgPT4ge1xuICBjb25zdCBpbnRlcmFjdGlvbiA9IG5ldyBJbnRlcmFjdGlvbih7IHNpZ25hbHM6IG1vY2tTaWduYWxzKCkgfSBhcyBhbnkpXG4gIGludGVyYWN0aW9uLmludGVyYWN0YWJsZSA9IG1vY2tJbnRlcmFjdGFibGUoKVxuICBpbnRlcmFjdGlvbi5pbnRlcmFjdGFibGUuZ2V0UmVjdCA9ICgpID0+ICh7IHRvcDogMCwgbGVmdDogMCwgYm90dG9tOiAxMDAsIHJpZ2h0OiAxMDAgfSBhcyBhbnkpXG4gIGludGVyYWN0aW9uLnByZXBhcmVkID0ge1xuICAgIG5hbWU6IG51bGwsXG4gICAgZWRnZXM6IHsgdG9wOiB0cnVlLCBsZWZ0OiB0cnVlLCBib3R0b206IGZhbHNlLCByaWdodDogZmFsc2UgfSxcbiAgfVxuICBpbnRlcmFjdGlvbi5faW50ZXJhY3RpbmcgPSB0cnVlXG5cbiAgY29uc3QgdGFyZ2V0MCA9IE9iamVjdC5mcmVlemUoeyB4OiAgNTAsIHk6ICAxMDAgfSlcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICB0YXJnZXRzOiBbXG4gICAgICB7IC4uLnRhcmdldDAgfSxcbiAgICBdLFxuICAgIHJhbmdlOiBJbmZpbml0eSxcbiAgfVxuICBjb25zdCBzdGF0ZSA9IHtcbiAgICBvcHRpb25zLFxuICAgIGRlbHRhOiB7IHg6IDAsIHk6IDAgfSxcbiAgICBvZmZzZXQ6IFt7IHg6IDAsIHk6IDAgfV0sXG4gIH1cbiAgY29uc3QgcGFnZUNvb3JkcyA9IE9iamVjdC5mcmVlemUoeyB4OiAxMCwgeTogMjAgfSlcbiAgY29uc3QgYXJnID0ge1xuICAgIGludGVyYWN0aW9uLFxuICAgIGludGVyYWN0YWJsZTogaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlLFxuICAgIHN0YXRlLFxuICAgIHBhZ2VDb29yZHMsXG4gICAgY29vcmRzOiB7IC4uLnBhZ2VDb29yZHMgfSxcbiAgfVxuXG4gIHNuYXBTaXplLnN0YXJ0KGFyZylcbiAgc25hcFNpemUuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChcbiAgICBhcmcuY29vcmRzLFxuICAgIHRhcmdldDAsXG4gICAgJ3NuYXBTaXplLnNldCBzaW5nbGUgdGFyZ2V0LCB6ZXJlbyBvZmZzZXQnXG4gIClcblxuICB0LmVuZCgpXG59KVxuIl19