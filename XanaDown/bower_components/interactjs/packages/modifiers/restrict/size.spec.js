import test from '@interactjs/_dev/test/test';
import { mockSignals } from '@interactjs/core/tests/_helpers';
import Interaction from '@interactjs/core/Interaction';
import rectUtils from '@interactjs/utils/rect';
import base from './../base';
import restrictSize from './../restrict/size';
test('restrictSize', (t) => {
    const edges = { left: true, top: true };
    const rect = { left: 0, top: 0, right: 200, bottom: 300 };
    const interaction = new Interaction({ signals: mockSignals() });
    interaction.prepared = { name: null };
    interaction.prepared.edges = edges;
    interaction.resizeRects = {};
    interaction.resizeRects.inverted = rectUtils.xywhToTlbr(rect);
    interaction.modifiers = {};
    interaction._interacting = true;
    const options = {
        min: { width: 60, height: 50 },
        max: { width: 300, height: 350 },
    };
    const startCoords = Object.freeze({ x: 0, y: 0 });
    const offset = { top: 0, bottom: 0, left: 0, right: 0 };
    const state = {
        options,
        offset,
        methods: restrictSize,
    };
    const arg = {
        interaction,
        states: [state],
        coords: startCoords,
        pageCoords: startCoords,
        options,
        state: null,
    };
    interaction.modifiers.startOffset = base.getRectOffset(rect, startCoords);
    base.startAll(arg);
    arg.state = state;
    const move1 = Object.freeze({ x: -50, y: -40 });
    arg.coords = { ...move1 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, move1, 'within both min and max');
    const move2 = Object.freeze({ x: -200, y: -300 });
    arg.coords = { ...move2 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, { x: -100, y: -50 }, 'outside max');
    const move3 = Object.freeze({ x: 250, y: 320 });
    arg.coords = { ...move3 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, { x: 140, y: 250 }, 'outside min');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2l6ZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQTtBQUU3RCxPQUFPLFdBQVcsTUFBTSw4QkFBOEIsQ0FBQTtBQUN0RCxPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQTtBQUM5QyxPQUFPLElBQUksTUFBTSxXQUFXLENBQUE7QUFDNUIsT0FBTyxZQUFZLE1BQU0sb0JBQW9CLENBQUE7QUFFN0MsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3pCLE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFDdkMsTUFBTSxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDekQsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQVMsQ0FBQyxDQUFBO0lBRXRFLFdBQVcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFDckMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ2xDLFdBQVcsQ0FBQyxXQUFXLEdBQUcsRUFBUyxDQUFBO0lBQ25DLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDN0QsV0FBVyxDQUFDLFNBQVMsR0FBRyxFQUFTLENBQUE7SUFDakMsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUE7SUFFL0IsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRyxFQUFFLEVBQUU7UUFDaEMsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO0tBQ2pDLENBQUE7SUFDRCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNqRCxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQTtJQUN2RCxNQUFNLEtBQUssR0FBRztRQUNaLE9BQU87UUFDUCxNQUFNO1FBQ04sT0FBTyxFQUFFLFlBQVk7S0FDdEIsQ0FBQTtJQUNELE1BQU0sR0FBRyxHQUFHO1FBQ1YsV0FBVztRQUNYLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNmLE1BQU0sRUFBRSxXQUFXO1FBQ25CLFVBQVUsRUFBRSxXQUFXO1FBQ3ZCLE9BQU87UUFDUCxLQUFLLEVBQUUsSUFBSTtLQUNaLENBQUE7SUFFRCxXQUFXLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUN6RSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2xCLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBRWpCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUMvQyxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQTtJQUN6QixZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRXJCLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUseUJBQXlCLENBQUMsQ0FBQTtJQUV6RCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDakQsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUE7SUFDekIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVyQixDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFFM0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDL0MsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUE7SUFDekIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVyQixDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQTtJQUUxRCxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0IHsgbW9ja1NpZ25hbHMgfSBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Rlc3RzL19oZWxwZXJzJ1xuXG5pbXBvcnQgSW50ZXJhY3Rpb24gZnJvbSAnQGludGVyYWN0anMvY29yZS9JbnRlcmFjdGlvbidcbmltcG9ydCByZWN0VXRpbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvcmVjdCdcbmltcG9ydCBiYXNlIGZyb20gJy4vLi4vYmFzZSdcbmltcG9ydCByZXN0cmljdFNpemUgZnJvbSAnLi8uLi9yZXN0cmljdC9zaXplJ1xuXG50ZXN0KCdyZXN0cmljdFNpemUnLCAodCkgPT4ge1xuICBjb25zdCBlZGdlcyA9IHsgbGVmdDogdHJ1ZSwgdG9wOiB0cnVlIH1cbiAgY29uc3QgcmVjdCA9IHsgbGVmdDogMCwgdG9wOiAwLCByaWdodDogMjAwLCBib3R0b206IDMwMCB9XG4gIGNvbnN0IGludGVyYWN0aW9uID0gbmV3IEludGVyYWN0aW9uKHsgc2lnbmFsczogbW9ja1NpZ25hbHMoKSB9IGFzIGFueSlcblxuICBpbnRlcmFjdGlvbi5wcmVwYXJlZCA9IHsgbmFtZTogbnVsbCB9XG4gIGludGVyYWN0aW9uLnByZXBhcmVkLmVkZ2VzID0gZWRnZXNcbiAgaW50ZXJhY3Rpb24ucmVzaXplUmVjdHMgPSB7fSBhcyBhbnlcbiAgaW50ZXJhY3Rpb24ucmVzaXplUmVjdHMuaW52ZXJ0ZWQgPSByZWN0VXRpbHMueHl3aFRvVGxicihyZWN0KVxuICBpbnRlcmFjdGlvbi5tb2RpZmllcnMgPSB7fSBhcyBhbnlcbiAgaW50ZXJhY3Rpb24uX2ludGVyYWN0aW5nID0gdHJ1ZVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgbWluOiB7IHdpZHRoOiAgNjAsIGhlaWdodDogIDUwIH0sXG4gICAgbWF4OiB7IHdpZHRoOiAzMDAsIGhlaWdodDogMzUwIH0sXG4gIH1cbiAgY29uc3Qgc3RhcnRDb29yZHMgPSBPYmplY3QuZnJlZXplKHsgeDogMCwgeTogMCB9KVxuICBjb25zdCBvZmZzZXQgPSB7IHRvcDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwLCByaWdodDogMCB9XG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIG9wdGlvbnMsXG4gICAgb2Zmc2V0LFxuICAgIG1ldGhvZHM6IHJlc3RyaWN0U2l6ZSxcbiAgfVxuICBjb25zdCBhcmcgPSB7XG4gICAgaW50ZXJhY3Rpb24sXG4gICAgc3RhdGVzOiBbc3RhdGVdLFxuICAgIGNvb3Jkczogc3RhcnRDb29yZHMsXG4gICAgcGFnZUNvb3Jkczogc3RhcnRDb29yZHMsXG4gICAgb3B0aW9ucyxcbiAgICBzdGF0ZTogbnVsbCxcbiAgfVxuXG4gIGludGVyYWN0aW9uLm1vZGlmaWVycy5zdGFydE9mZnNldCA9IGJhc2UuZ2V0UmVjdE9mZnNldChyZWN0LCBzdGFydENvb3JkcylcbiAgYmFzZS5zdGFydEFsbChhcmcpXG4gIGFyZy5zdGF0ZSA9IHN0YXRlXG5cbiAgY29uc3QgbW92ZTEgPSBPYmplY3QuZnJlZXplKHsgeDogLTUwLCB5OiAtNDAgfSlcbiAgYXJnLmNvb3JkcyA9IHsgLi4ubW92ZTEgfVxuICByZXN0cmljdFNpemUuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChhcmcuY29vcmRzLCBtb3ZlMSwgJ3dpdGhpbiBib3RoIG1pbiBhbmQgbWF4JylcblxuICBjb25zdCBtb3ZlMiA9IE9iamVjdC5mcmVlemUoeyB4OiAtMjAwLCB5OiAtMzAwIH0pXG4gIGFyZy5jb29yZHMgPSB7IC4uLm1vdmUyIH1cbiAgcmVzdHJpY3RTaXplLnNldChhcmcpXG5cbiAgdC5kZWVwRXF1YWwoYXJnLmNvb3JkcywgeyB4OiAtMTAwLCB5OiAtNTAgfSwgJ291dHNpZGUgbWF4JylcblxuICBjb25zdCBtb3ZlMyA9IE9iamVjdC5mcmVlemUoeyB4OiAyNTAsIHk6IDMyMCB9KVxuICBhcmcuY29vcmRzID0geyAuLi5tb3ZlMyB9XG4gIHJlc3RyaWN0U2l6ZS5zZXQoYXJnKVxuXG4gIHQuZGVlcEVxdWFsKGFyZy5jb29yZHMsIHsgeDogMTQwLCB5OiAyNTAgfSwgJ291dHNpZGUgbWluJylcblxuICB0LmVuZCgpXG59KVxuIl19