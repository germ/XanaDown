import test from '@interactjs/_dev/test/test';
import Interaction from '@interactjs/core/Interaction';
import { mockSignals } from '@interactjs/core/tests/_helpers';
import restrictEdges from '../restrict/edges';
test('restrictEdges', (t) => {
    const interaction = new Interaction({ signals: mockSignals() });
    interaction.prepared = {};
    interaction.prepared.edges = { top: true, bottom: true, left: true, right: true };
    interaction.resizeRects = {};
    interaction.resizeRects.inverted = { x: 10, y: 20, width: 300, height: 200 };
    interaction._interacting = true;
    const options = { enabled: true };
    const coords = { x: 40, y: 40 };
    const offset = { top: 0, left: 0, bottom: 0, right: 0 };
    const state = { options, offset };
    const arg = { interaction, state };
    arg.coords = { ...coords };
    // outer restriction
    options.outer = { top: 100, left: 100, bottom: 200, right: 200 };
    restrictEdges.set(arg);
    t.deepEqual(arg.coords, { x: coords.y + 60, y: coords.y + 60 }, 'outer restriction is applied correctly');
    arg.coords = { ...coords };
    // inner restriction
    options.outer = null;
    options.inner = { top: 0, left: 0, bottom: 10, right: 10 };
    restrictEdges.set(arg);
    t.deepEqual(arg.coords, { x: coords.x - 40, y: coords.y - 40 }, 'inner restriction is applied correctly');
    // offset
    Object.assign(offset, {
        top: 100,
        left: 100,
        bottom: 200,
        right: 200,
    });
    arg.coords = { ...coords };
    options.outer = { top: 100, left: 100, bottom: 200, right: 200 };
    options.inner = null;
    restrictEdges.set(arg);
    t.deepEqual(arg.coords, { x: coords.x + 160, y: coords.x + 160 }, 'outer restriction is applied correctly with offset');
    // start
    interaction.modifiers = {};
    interaction.modifiers.startOffset = { top: 5, left: 10, bottom: -8, right: -16 };
    interaction.interactable = {
        getRect() {
            return { top: 500, left: 900 };
        },
    };
    options.offset = 'self';
    restrictEdges.start(arg);
    t.deepEqual(arg.state.offset, { top: 505, left: 910, bottom: 508, right: 916 }, 'start gets x/y from selector string');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRnZXMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVkZ2VzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sNEJBQTRCLENBQUE7QUFDN0MsT0FBTyxXQUFXLE1BQU0sOEJBQThCLENBQUE7QUFDdEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFBO0FBQzdELE9BQU8sYUFBYSxNQUFNLG1CQUFtQixDQUFBO0FBRTdDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUMxQixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBUyxDQUFDLENBQUE7SUFDdEUsV0FBVyxDQUFDLFFBQVEsR0FBRyxFQUFTLENBQUE7SUFDaEMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFDakYsV0FBVyxDQUFDLFdBQVcsR0FBRyxFQUFTLENBQUE7SUFDbkMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFTLENBQUE7SUFDbkYsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUE7SUFFL0IsTUFBTSxPQUFPLEdBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFDdEMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQTtJQUMvQixNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxF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LE1BQU0sR0FBRyxNQUFNLENBQUE7SUFDdkIsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUV4QixDQUFDLENBQUMsU0FBUyxDQUNULEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUNoQixFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFDaEQscUNBQXFDLENBQ3RDLENBQUE7SUFFRCxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0IEludGVyYWN0aW9uIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvSW50ZXJhY3Rpb24nXG5pbXBvcnQgeyBtb2NrU2lnbmFscyB9IGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvX2hlbHBlcnMnXG5pbXBvcnQgcmVzdHJpY3RFZGdlcyBmcm9tICcuLi9yZXN0cmljdC9lZGdlcydcblxudGVzdCgncmVzdHJpY3RFZGdlcycsICh0KSA9PiB7XG4gIGNvbnN0IGludGVyYWN0aW9uID0gbmV3IEludGVyYWN0aW9uKHsgc2lnbmFsczogbW9ja1NpZ25hbHMoKSB9IGFzIGFueSlcbiAgaW50ZXJhY3Rpb24ucHJlcGFyZWQgPSB7fSBhcyBhbnlcbiAgaW50ZXJhY3Rpb24ucHJlcGFyZWQuZWRnZXMgPSB7IHRvcDogdHJ1ZSwgYm90dG9tOiB0cnVlLCBsZWZ0OiB0cnVlLCByaWdodDogdHJ1ZSB9XG4gIGludGVyYWN0aW9uLnJlc2l6ZVJlY3RzID0ge30gYXMgYW55XG4gIGludGVyYWN0aW9uLnJlc2l6ZVJlY3RzLmludmVydGVkID0geyB4OiAxMCwgeTogMjAsIHdpZHRoOiAzMDAsIGhlaWdodDogMjAwIH0gYXMgYW55XG4gIGludGVyYWN0aW9uLl9pbnRlcmFjdGluZyA9IHRydWVcblxuICBjb25zdCBvcHRpb25zOiBhbnkgPSB7IGVuYWJsZWQ6IHRydWUgfVxuICBjb25zdCBjb29yZHMgPSB7IHg6IDQwLCB5OiA0MCB9XG4gIGNvbnN0IG9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDAsIHJpZ2h0OiAwIH1cbiAgY29uc3Qgc3RhdGUgPSB7IG9wdGlvbnMsIG9mZnNldCB9XG4gIGNvbnN0IGFyZyA9IHsgaW50ZXJhY3Rpb24sIHN0YXRlIH0gYXMgYW55XG5cbiAgYXJnLmNvb3JkcyA9IHsgLi4uY29vcmRzIH1cblxuICAvLyBvdXRlciByZXN0cmljdGlvblxuICBvcHRpb25zLm91dGVyID0geyB0b3A6IDEwMCwgbGVmdDogMTAwLCBib3R0b206IDIwMCwgcmlnaHQ6IDIwMCB9XG4gIHJlc3RyaWN0RWRnZXMuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChcbiAgICBhcmcuY29vcmRzLFxuICAgIHsgeDogY29vcmRzLnkgKyA2MCwgeTogY29vcmRzLnkgKyA2MCB9LFxuICAgICdvdXRlciByZXN0cmljdGlvbiBpcyBhcHBsaWVkIGNvcnJlY3RseSdcbiAgKVxuXG4gIGFyZy5jb29yZHMgPSB7IC4uLmNvb3JkcyB9XG5cbiAgLy8gaW5uZXIgcmVzdHJpY3Rpb25cbiAgb3B0aW9ucy5vdXRlciA9IG51bGxcbiAgb3B0aW9ucy5pbm5lciA9IHsgdG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDEwLCByaWdodDogMTAgfVxuICByZXN0cmljdEVkZ2VzLnNldChhcmcpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgYXJnLmNvb3JkcyxcbiAgICB7IHg6IGNvb3Jkcy54IC0gNDAsIHk6IGNvb3Jkcy55IC0gNDAgfSxcbiAgICAnaW5uZXIgcmVzdHJpY3Rpb24gaXMgYXBwbGllZCBjb3JyZWN0bHknXG4gIClcblxuICAvLyBvZmZzZXRcbiAgT2JqZWN0LmFzc2lnbihvZmZzZXQsIHtcbiAgICB0b3A6IDEwMCxcbiAgICBsZWZ0OiAxMDAsXG4gICAgYm90dG9tOiAyMDAsXG4gICAgcmlnaHQ6IDIwMCxcbiAgfSlcbiAgYXJnLmNvb3JkcyA9IHsgLi4uY29vcmRzIH1cblxuICBvcHRpb25zLm91dGVyID0geyB0b3A6IDEwMCwgbGVmdDogMTAwLCBib3R0b206IDIwMCwgcmlnaHQ6IDIwMCB9XG4gIG9wdGlvbnMuaW5uZXIgPSBudWxsXG4gIHJlc3RyaWN0RWRnZXMuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChcbiAgICBhcmcuY29vcmRzLFxuICAgIHsgeDogY29vcmRzLnggKyAxNjAsIHk6IGNvb3Jkcy54ICsgMTYwIH0sXG4gICAgJ291dGVyIHJlc3RyaWN0aW9uIGlzIGFwcGxpZWQgY29ycmVjdGx5IHdpdGggb2Zmc2V0J1xuICApXG5cbiAgLy8gc3RhcnRcbiAgaW50ZXJhY3Rpb24ubW9kaWZpZXJzID0ge30gYXMgYW55XG4gIGludGVyYWN0aW9uLm1vZGlmaWVycy5zdGFydE9mZnNldCA9IHsgdG9wOiA1LCBsZWZ0OiAxMCwgYm90dG9tOiAtOCwgcmlnaHQ6IC0xNiB9XG4gIGludGVyYWN0aW9uLmludGVyYWN0YWJsZSA9IHtcbiAgICBnZXRSZWN0ICgpIHtcbiAgICAgIHJldHVybiB7IHRvcDogNTAwLCBsZWZ0OiA5MDAgfVxuICAgIH0sXG4gIH0gYXMgYW55XG5cbiAgb3B0aW9ucy5vZmZzZXQgPSAnc2VsZidcbiAgcmVzdHJpY3RFZGdlcy5zdGFydChhcmcpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgYXJnLnN0YXRlLm9mZnNldCxcbiAgICB7IHRvcDogNTA1LCBsZWZ0OiA5MTAsIGJvdHRvbTogNTA4LCByaWdodDogOTE2IH0sXG4gICAgJ3N0YXJ0IGdldHMgeC95IGZyb20gc2VsZWN0b3Igc3RyaW5nJ1xuICApXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==