import basePlugin from './base';
function install(scope) {
    const { autoStart, interactions, defaults, } = scope;
    scope.usePlugin(basePlugin);
    defaults.perAction.hold = 0;
    defaults.perAction.delay = 0;
    interactions.signals.on('new', (interaction) => {
        interaction.autoStartHoldTimer = null;
    });
    autoStart.signals.on('prepared', ({ interaction }) => {
        const hold = getHoldDuration(interaction);
        if (hold > 0) {
            interaction.autoStartHoldTimer = setTimeout(() => {
                interaction.start(interaction.prepared, interaction.interactable, interaction.element);
            }, hold);
        }
    });
    interactions.signals.on('move', ({ interaction, duplicate }) => {
        if (interaction.pointerWasMoved && !duplicate) {
            clearTimeout(interaction.autoStartHoldTimer);
        }
    });
    // prevent regular down->move autoStart
    autoStart.signals.on('before-start', ({ interaction }) => {
        const hold = getHoldDuration(interaction);
        if (hold > 0) {
            interaction.prepared.name = null;
        }
    });
}
function getHoldDuration(interaction) {
    const actionName = interaction.prepared && interaction.prepared.name;
    if (!actionName) {
        return null;
    }
    const options = interaction.interactable.options;
    return options[actionName].hold || options[actionName].delay;
}
export default {
    id: 'auto-start/hold',
    install,
    getHoldDuration,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9sZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhvbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxVQUFVLE1BQU0sUUFBUSxDQUFBO0FBZS9CLFNBQVMsT0FBTyxDQUFFLEtBQXFCO0lBQ3JDLE1BQU0sRUFDSixTQUFTLEVBQ1QsWUFBWSxFQUNaLFFBQVEsR0FDVCxHQUFHLEtBQUssQ0FBQTtJQUVULEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFM0IsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBO0lBQzNCLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUU1QixZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtRQUM3QyxXQUFXLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFBO0lBQ3ZDLENBQUMsQ0FBQyxDQUFBO0lBRUYsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFO1FBQ25ELE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUV6QyxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7WUFDWixXQUFXLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDL0MsV0FBVyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ3hGLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtTQUNUO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFO1FBQzdELElBQUksV0FBVyxDQUFDLGVBQWUsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUM3QyxZQUFZLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUE7U0FDN0M7SUFDSCxDQUFDLENBQUMsQ0FBQTtJQUVGLHVDQUF1QztJQUN2QyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7UUFDdkQsTUFBTSxJQUFJLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBRXpDLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRTtZQUNaLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtTQUNqQztJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFFLFdBQVc7SUFDbkMsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQTtJQUVwRSxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQUUsT0FBTyxJQUFJLENBQUE7S0FBRTtJQUVoQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQTtJQUVoRCxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUM5RCxDQUFDO0FBRUQsZUFBZTtJQUNiLEVBQUUsRUFBRSxpQkFBaUI7SUFDckIsT0FBTztJQUNQLGVBQWU7Q0FDaEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlUGx1Z2luIGZyb20gJy4vYmFzZSdcblxuZGVjbGFyZSBtb2R1bGUgJ0BpbnRlcmFjdGpzL2NvcmUvZGVmYXVsdE9wdGlvbnMnIHtcbiAgaW50ZXJmYWNlIFBlckFjdGlvbkRlZmF1bHRzIHtcbiAgICBob2xkPzogbnVtYmVyXG4gICAgZGVsYXk/OiBudW1iZXJcbiAgfVxufVxuXG5kZWNsYXJlIG1vZHVsZSAnQGludGVyYWN0anMvY29yZS9JbnRlcmFjdGlvbicge1xuICBpbnRlcmZhY2UgSW50ZXJhY3Rpb24ge1xuICAgIGF1dG9TdGFydEhvbGRUaW1lcj86IGFueVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGwgKHNjb3BlOiBJbnRlcmFjdC5TY29wZSkge1xuICBjb25zdCB7XG4gICAgYXV0b1N0YXJ0LFxuICAgIGludGVyYWN0aW9ucyxcbiAgICBkZWZhdWx0cyxcbiAgfSA9IHNjb3BlXG5cbiAgc2NvcGUudXNlUGx1Z2luKGJhc2VQbHVnaW4pXG5cbiAgZGVmYXVsdHMucGVyQWN0aW9uLmhvbGQgPSAwXG4gIGRlZmF1bHRzLnBlckFjdGlvbi5kZWxheSA9IDBcblxuICBpbnRlcmFjdGlvbnMuc2lnbmFscy5vbignbmV3JywgKGludGVyYWN0aW9uKSA9PiB7XG4gICAgaW50ZXJhY3Rpb24uYXV0b1N0YXJ0SG9sZFRpbWVyID0gbnVsbFxuICB9KVxuXG4gIGF1dG9TdGFydC5zaWduYWxzLm9uKCdwcmVwYXJlZCcsICh7IGludGVyYWN0aW9uIH0pID0+IHtcbiAgICBjb25zdCBob2xkID0gZ2V0SG9sZER1cmF0aW9uKGludGVyYWN0aW9uKVxuXG4gICAgaWYgKGhvbGQgPiAwKSB7XG4gICAgICBpbnRlcmFjdGlvbi5hdXRvU3RhcnRIb2xkVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaW50ZXJhY3Rpb24uc3RhcnQoaW50ZXJhY3Rpb24ucHJlcGFyZWQsIGludGVyYWN0aW9uLmludGVyYWN0YWJsZSwgaW50ZXJhY3Rpb24uZWxlbWVudClcbiAgICAgIH0sIGhvbGQpXG4gICAgfVxuICB9KVxuXG4gIGludGVyYWN0aW9ucy5zaWduYWxzLm9uKCdtb3ZlJywgKHsgaW50ZXJhY3Rpb24sIGR1cGxpY2F0ZSB9KSA9PiB7XG4gICAgaWYgKGludGVyYWN0aW9uLnBvaW50ZXJXYXNNb3ZlZCAmJiAhZHVwbGljYXRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoaW50ZXJhY3Rpb24uYXV0b1N0YXJ0SG9sZFRpbWVyKVxuICAgIH1cbiAgfSlcblxuICAvLyBwcmV2ZW50IHJlZ3VsYXIgZG93bi0+bW92ZSBhdXRvU3RhcnRcbiAgYXV0b1N0YXJ0LnNpZ25hbHMub24oJ2JlZm9yZS1zdGFydCcsICh7IGludGVyYWN0aW9uIH0pID0+IHtcbiAgICBjb25zdCBob2xkID0gZ2V0SG9sZER1cmF0aW9uKGludGVyYWN0aW9uKVxuXG4gICAgaWYgKGhvbGQgPiAwKSB7XG4gICAgICBpbnRlcmFjdGlvbi5wcmVwYXJlZC5uYW1lID0gbnVsbFxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0SG9sZER1cmF0aW9uIChpbnRlcmFjdGlvbikge1xuICBjb25zdCBhY3Rpb25OYW1lID0gaW50ZXJhY3Rpb24ucHJlcGFyZWQgJiYgaW50ZXJhY3Rpb24ucHJlcGFyZWQubmFtZVxuXG4gIGlmICghYWN0aW9uTmFtZSkgeyByZXR1cm4gbnVsbCB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IGludGVyYWN0aW9uLmludGVyYWN0YWJsZS5vcHRpb25zXG5cbiAgcmV0dXJuIG9wdGlvbnNbYWN0aW9uTmFtZV0uaG9sZCB8fCBvcHRpb25zW2FjdGlvbk5hbWVdLmRlbGF5XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaWQ6ICdhdXRvLXN0YXJ0L2hvbGQnLFxuICBpbnN0YWxsLFxuICBnZXRIb2xkRHVyYXRpb24sXG59XG4iXX0=