import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import pointerUtils from '@interactjs/utils/pointerUtils';
import * as actions from './index';
test('actions integration', (t) => {
    const scope = helpers.mockScope();
    const event = pointerUtils.coordsToEvent(pointerUtils.newCoords());
    const element = scope.document.body;
    scope.usePlugin(actions);
    const interactable = scope.interactables.new(element);
    // make a dropzone
    scope.interactables.new(scope.document.documentElement).dropzone({});
    const interaction1 = scope.interactions.new({});
    interaction1.pointerDown(event, event, element);
    for (const name of scope.actions.names) {
        interaction1.start({ name }, interactable, element);
        interaction1.stop();
        t.doesNotThrow(() => {
            t.notOk(interaction1.interacting(), `${name} interaction starts and stops as expected`);
        }, `${name} start and stop does not throw`);
    }
    for (const order of [scope.actions.names, [...scope.actions.names].reverse()]) {
        const interaction2 = scope.interactions.new({});
        for (const name of order) {
            t.doesNotThrow(() => {
                interaction2.start({ name }, interactable, element);
                interaction2.pointerMove(event, event, element);
                interaction2.pointerUp(event, event, element, element);
                t.notOk(interaction2.interacting(), `${name} interaction starts, moves and ends as expected`);
            }, `${name} sequence does not throw`);
        }
    }
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWN0aW9ucy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxZQUFZLE1BQU0sZ0NBQWdDLENBQUE7QUFDekQsT0FBTyxLQUFLLE9BQU8sTUFBTSxTQUFTLENBQUE7QUFFbEMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDaEMsTUFBTSxLQUFLLEdBQW1CLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUNqRCxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFBO0lBQ2xFLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFBO0lBRW5DLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFeEIsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDckQsa0JBQWtCO0lBQ2xCLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3BFLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRS9DLFlBQVksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUUvQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1FBQ3RDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDbkQsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFBO1FBRW5CLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFO1lBQ2xCLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxFQUFFLEdBQUcsSUFBSSwyQ0FBMkMsQ0FBQyxDQUFBO1FBQ3pGLENBQUMsRUFBRSxHQUFHLElBQUksZ0NBQWdDLENBQUMsQ0FBQTtLQUM1QztJQUVELEtBQUssTUFBTSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFO1FBQzdFLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRS9DLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3hCLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFO2dCQUNsQixZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFBO2dCQUNuRCxZQUFZLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7Z0JBQy9DLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7Z0JBRXRELENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxFQUFFLEdBQUcsSUFBSSxpREFBaUQsQ0FBQyxDQUFBO1lBQy9GLENBQUMsRUFBRSxHQUFHLElBQUksMEJBQTBCLENBQUMsQ0FBQTtTQUN0QztLQUNGO0lBRUQsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9faGVscGVycydcbmltcG9ydCBwb2ludGVyVXRpbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvcG9pbnRlclV0aWxzJ1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuL2luZGV4J1xuXG50ZXN0KCdhY3Rpb25zIGludGVncmF0aW9uJywgKHQpID0+IHtcbiAgY29uc3Qgc2NvcGU6IEludGVyYWN0LlNjb3BlID0gaGVscGVycy5tb2NrU2NvcGUoKVxuICBjb25zdCBldmVudCA9IHBvaW50ZXJVdGlscy5jb29yZHNUb0V2ZW50KHBvaW50ZXJVdGlscy5uZXdDb29yZHMoKSlcbiAgY29uc3QgZWxlbWVudCA9IHNjb3BlLmRvY3VtZW50LmJvZHlcblxuICBzY29wZS51c2VQbHVnaW4oYWN0aW9ucylcblxuICBjb25zdCBpbnRlcmFjdGFibGUgPSBzY29wZS5pbnRlcmFjdGFibGVzLm5ldyhlbGVtZW50KVxuICAvLyBtYWtlIGEgZHJvcHpvbmVcbiAgc2NvcGUuaW50ZXJhY3RhYmxlcy5uZXcoc2NvcGUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5kcm9wem9uZSh7fSlcbiAgY29uc3QgaW50ZXJhY3Rpb24xID0gc2NvcGUuaW50ZXJhY3Rpb25zLm5ldyh7fSlcblxuICBpbnRlcmFjdGlvbjEucG9pbnRlckRvd24oZXZlbnQsIGV2ZW50LCBlbGVtZW50KVxuXG4gIGZvciAoY29uc3QgbmFtZSBvZiBzY29wZS5hY3Rpb25zLm5hbWVzKSB7XG4gICAgaW50ZXJhY3Rpb24xLnN0YXJ0KHsgbmFtZSB9LCBpbnRlcmFjdGFibGUsIGVsZW1lbnQpXG4gICAgaW50ZXJhY3Rpb24xLnN0b3AoKVxuXG4gICAgdC5kb2VzTm90VGhyb3coKCkgPT4ge1xuICAgICAgdC5ub3RPayhpbnRlcmFjdGlvbjEuaW50ZXJhY3RpbmcoKSwgYCR7bmFtZX0gaW50ZXJhY3Rpb24gc3RhcnRzIGFuZCBzdG9wcyBhcyBleHBlY3RlZGApXG4gICAgfSwgYCR7bmFtZX0gc3RhcnQgYW5kIHN0b3AgZG9lcyBub3QgdGhyb3dgKVxuICB9XG5cbiAgZm9yIChjb25zdCBvcmRlciBvZiBbc2NvcGUuYWN0aW9ucy5uYW1lcywgWy4uLnNjb3BlLmFjdGlvbnMubmFtZXNdLnJldmVyc2UoKV0pIHtcbiAgICBjb25zdCBpbnRlcmFjdGlvbjIgPSBzY29wZS5pbnRlcmFjdGlvbnMubmV3KHt9KVxuXG4gICAgZm9yIChjb25zdCBuYW1lIG9mIG9yZGVyKSB7XG4gICAgICB0LmRvZXNOb3RUaHJvdygoKSA9PiB7XG4gICAgICAgIGludGVyYWN0aW9uMi5zdGFydCh7IG5hbWUgfSwgaW50ZXJhY3RhYmxlLCBlbGVtZW50KVxuICAgICAgICBpbnRlcmFjdGlvbjIucG9pbnRlck1vdmUoZXZlbnQsIGV2ZW50LCBlbGVtZW50KVxuICAgICAgICBpbnRlcmFjdGlvbjIucG9pbnRlclVwKGV2ZW50LCBldmVudCwgZWxlbWVudCwgZWxlbWVudClcblxuICAgICAgICB0Lm5vdE9rKGludGVyYWN0aW9uMi5pbnRlcmFjdGluZygpLCBgJHtuYW1lfSBpbnRlcmFjdGlvbiBzdGFydHMsIG1vdmVzIGFuZCBlbmRzIGFzIGV4cGVjdGVkYClcbiAgICAgIH0sIGAke25hbWV9IHNlcXVlbmNlIGRvZXMgbm90IHRocm93YClcbiAgICB9XG4gIH1cblxuICB0LmVuZCgpXG59KVxuIl19